#!/usr/bin/env perl

use strict;
use warnings;
use Pod::Usage qw/pod2usage/;
use Getopt::Long;
use FindBin qw/$RealBin/;
use lib "$RealBin/../lib";
use Utils;


my ($inslst, 	#insert list
    $bedinput,	#BED format toggle
    $dellst, 	#delete list
    $db,   	#db 
    $filelst,	#filelist
    $hg18,	#use hg18 if true
    $annodir,
    $listfile,
    $bincol,  	#first column is BIN, used for direct downloading from UCSC
    $col,	#specify the column to extract (default is score column (5th excluding BIN column)
);

@ARGV or pod2usage();
GetOptions(
    "inslist=s"		=>	\$listfile,
    "bedinput"		=>	\$bedinput,
    "insert|i=s"	=>	\$inslst,
    "delete|d=s"	=>	\$dellst,
    "file|f=s"		=>	\$filelst,
    "annodir=s"		=>	\$annodir,
    "hg18"		=>	\$hg18,
    "bincol"		=>	\$bincol,
    "col=i"		=>	\$col,
) or pod2usage ();

#insert BED tables from a specific db
#delete tables from a specific db
my $executedb="$RealBin/../src/executeDB.py";
my $annovar="annotate_variation.pl";
my $liftover="/home/yunfeiguo/Downloads/liftover/liftOver";
my $hg19to18chain="/home/yunfeiguo/Downloads/liftover/hg19ToHg18.over.chain";
my %chr2no=(
    'chr1' => '1', 'chr2' => '2', 'chr3' => '3', 'chr4' => '4',
    'chr5' => '5', 'chr6' => '6', 'chr7' => '7', 'chr8' => '8',
    'chr9' => '9', 'chr10' => '10', 'chr11' => '11', 'chr12' => '12',
    'chr13' => '13', 'chr14' => '14', 'chr15' => '15', 'chr16' => '16',
    'chr17' => '17', 'chr18' => '18', 'chr19' => '19', 'chr20' => '20',
    'chr21' => '21', 'chr22' => '22', 'chrx' => '23', 'chry' => '24',
    'chrmito' => '25', 'chrxy' => '26',
    '1' => '1', '2' => '2', '3' => '3', '4' => '4',
    '5' => '5', '6' => '6', '7' => '7', '8' => '8',
    '9' => '9', '10' => '10', '11' => '11', '12' => '12',
    '13' => '13', '14' => '14', '15' => '15', '16' => '16',
    '17' => '17', '18' => '18', '19' => '19', '20' => '20',
    '21' => '21', '22' => '22', 'x' => '23', 'y' => '24',
    'mito' => '25', 'xy' => '26',
); 
$db=shift @ARGV;
warn "No database\n" and pod2usage() unless $db;
my @ins=split /,/,$inslst if $inslst;
my @del=split /,/,$dellst if $dellst;
my @file=split /,/,$filelst if $filelst;
my @unlink;

if ($listfile)
{
    warn "NOTICE: use tables in $listfile.\n";
    warn "$inslst and $filelst will be ignored.\n" if ($inslst || $filelst);
    my %tmp=&Utils::readObj($listfile);
    @ins=map { $tmp{$_}{table} } keys %tmp;
    @file=();
} 
if ( @file && @ins!=@file)
{
    die "ERROR: if -file is specified, the number of arguments for -insert must be equal\n";
}

#first process deletion
if (@del)
{
    for my $del_table(@del)
    {
	#delete table in locuszoom database
	if (!system("$executedb --db $db --delete $del_table"))
	{
	    warn "$del_table deleted.\n";
	} else
	{
	    warn "Cannot delete $del_table from $db: $!\n";
	    warn "Remaining tables:\n";
	    !system("sqlite3 $db .table") or die "Failed to show tables: $!\n";
	    die "\n";
	}
	#delete ANNOVAR tables
	if (defined $annodir)
	{
	    my $annovar_db=($hg18? "hg18": "hg19")."_$del_table.txt";
	    $annovar_db=File::Spec->catfile($annodir,$annovar_db);
	    if (-f $annovar_db)
	    {
		unlink $annovar_db and warn "$annovar_db deleted\n";
	    }
	}
    }
}

#then process insertion

if (@ins)
{
    ##resolve table file for each table name
    @file=&filecheck(\@ins,\@file) or die "ERROR: not every insertion table corresponds to a file\n";
    for my $i (0..$#file)
    {
	my $name=$ins[$i];
	my $file=$file[$i];
	! system("$executedb --db $db ".(($col && $col != 5)? "--cattablefile $file":"--tablefile $file")." --tablename $name")
	    or die "Cannot insert $name ($file) into $db\n";
    }
}

#cleanup
!system("rm -rf @unlink") or die "Failed to clean @unlink: $!\n";

##########################SUBROUTINES########################
sub bed2generic
{
    #!!!!!!!!!!
    #extract some cols, also convert 0start to 1start!!!!
    my @generic_tables;
    my $target_col=$col || 5;
    for my $table (@_)
    {
	open IN, "<", $table or die "Cannot open $table\n";
	my @output;
	while (<IN>)
	{
	    s/[\r\n]+$//;
	    next if /^(track|#|browser|\s)/i; #skip header
	    my @line=split (/\t/,$_,-1);
	    if ($bincol)
	    {
		shift @line; #remove BIN column
	    }
	    next unless @line>=$target_col; 
	    $line[0]=lc($line[0]);
	    next unless $chr2no{$line[0]};
	    push @output, join("\t",$chr2no{$line[0]},($line[1]+1),$line[2],$line[$target_col-1]),"\n"; #+1 for 1-start
	}
	close IN;
	my $outfile="/tmp/annodb_admin.$$.generic.".rand($$);
	open OUT, ">", $outfile or die "Cannot create $outfile\n";
	print OUT join("\t",'chr','start','end',($target_col!=5? 'annotation':'score')),"\n";
	print OUT @output;
	close OUT;
	push @unlink,$outfile;
	push @generic_tables,$outfile;
    }
    return wantarray? @generic_tables:$generic_tables[0];
}

sub filecheck
{

    my @names=@{shift @_};
    my @tables=@{shift @_};
    if (@names == @tables)
    {
	if ($bedinput)
	{
	    @tables=&bed2generic(@tables);
	}
	return @tables;
    } elsif (@tables == 0)
    {
	warn ("Try to download tables from UCSC genome browser\n");
        warn ("NOTICE: Both plot database and annotation database will be updated.\n");
	for my $item (@names)
	{
	    my $url="hgdownload.cse.ucsc.edu/goldenPath/".($hg18? "hg18":"hg19")."/database/$item.txt.gz";
	    my $file="$item.txt.gz";
	    my $unpack_file="$item.txt";
	    push @unlink,$file;
	    push @unlink,$unpack_file;
	    if (&Utils::getstore($url,$file))
	    {
		warn "Unpacking ...\n";
		&Utils::extract_archive($file,$unpack_file) or die "Cannot unpack $file\n";
	    } else
	    {
		if ($hg18)
		{
		    #download hg19, then lift over
		    my $tmp="/tmp/$item.hg19.txt.gz"; 
		    push @unlink,$tmp;
		    my $tmp_unpack="/tmp/$item.hg19.txt"; 
		    push @unlink,$tmp_unpack;
		    my $tmp_nohead="/tmp/$item.hg19.nohead.txt";
		    push @unlink,$tmp_nohead;
		    my $tmp_nobin="/tmp/$item.hg19.nobin.txt";
		    push @unlink,$tmp_nobin;

		    warn "Cannot download $item from UCSC\n";
		    warn "Try hg19 version\n";
		    $url=~s%/hg18/%/hg19/%;
		    &Utils::getstore($url,$tmp) or die "Cannot get $item\n";
		    &Utils::extract_archive($tmp,$tmp_unpack) or die "Cannot unpack $tmp\n";
		    &rmheader($tmp_unpack,$tmp_nohead);
		    ! system("$liftover -bedPlus=3 $tmp_nohead $hg19to18chain $tmp_nobin /tmp/$$.iii.tmp ") or die "Failed to liftover $item from hg19 to hg18: $!\n";
		    &addbin($tmp_nobin,$unpack_file);
		} else
		{
		    die "Cannot download $file from UCSC\n";
		}
	    }
	    warn "Extracting chr,start,end,annotation ...\n";
	    my ($convert_file)=&bed2generic($unpack_file);
	    push @tables,$convert_file;
	    if (defined $annodir)
	    {
		my $annovar_db=($hg18? "hg18":"hg19")."_$unpack_file";
		$annovar_db=File::Spec->catfile($annodir,$annovar_db);
		!system("perl -ne 'next if /^(track|#|browser|\\s)/i; print' $unpack_file > $annovar_db") or die "Failed to remove $unpack_file header: $!\n";
		warn "ANNOVAR database: $annovar_db done.\n";
	    }
	}

    }else
    {
	return 0;
    }
    return @tables;
}
sub rmheader
{
    my $in=shift;
    my $out=shift;

    open IN,'<',$in or die "Can't read $in: $!\n";
    open OUT,'>',$out or die "Can't write to $out: $!\n";
    while (<IN>)
    {
	    next if /^(track|#|browser|\s)/i; #skip header
	    s/^\S+\s//; #remove first column (bin col)
	    print OUT $_;
    }
    close IN;
    close OUT;
}
sub addbin
{
    my $in=shift;
    my $out=shift;

    open IN,'<',$in or die "Can't read $in: $!\n";
    open OUT,'>',$out or die "Can't write to $out: $!\n";
    while (<IN>)
    {
	    s/^/1\t/; #remove first column (bin col)
	    print OUT $_;
    }
    close IN;
    close OUT;
}


__END__


=head1 NAME

annodb_admin

=head1 SYNOPSIS

annodb_admin [options] <database>

 -inslist <FILE>	a file storing tables and associated properties
 -bedinput	        insert table file is BED format
 -insert,-i <STR>	list of table names to be inserted
 -delete,-d <STR>	list of table names to be deleted
 -file,-f <STR>		list of table files to be inserted
 -annodir <DIR>		annovar database folder
 -hg18			use it if build version is hg18
 -bincol		first column in BED is BIN column
 -col			specify the column to extract. Default is score column (5th excluding BIN column).


 NOTE: All list must be comma-separated.
 NOTE: Each table file, if supplied, must has a corresponding table name.
 NOTE: If no table file supplied, it will be downloaded from UCSC server.

 Example:
 #for score annotation
 annodb_admin -bincol -annodir ~/Downloads/annovar/humandb/ -inslist ../conf/datatracks.txt ../data/database/enlight_hg19.db
 #for category annotation (eg chromHMM)
 annodb_admin -bincol -annodir ~/Downloads/annovar/humandb/ -inslist ../conf/chromhmm.txt ../data/database/enlight_hg19.db -col 9

=cut

#!/usr/bin/env perl

use strict;
use warnings;
use Cwd;

print "Make sure you have cleaned up unnecessary files!\n";
my @avinput_files=glob "*avinput";
my $cwd=cwd;
for my $file_name(@avinput_files) {
	my ($rs_ID)=($file_name=~/(rs\d+)_.*/);
	#remove annovar output files ending with 'filtered', these are temporary files generated by summarize_annovar and empty files
	my @annovar_files;
	for (glob "$file_name.hg19*") {
		push @annovar_files, $_ unless (/filtered$/ || -z);
		}

	open R_SCRIPT, "> $rs_ID.tmp.script" or die "Can't open $rs_ID.tmp.script: $!";
	select R_SCRIPT;
	print ("#!/usr/bin/Rscript --vanilla\n");
	print ("setwd(\"$cwd\")\n");
#check if duplicate rows exist.
	for my $i (@annovar_files) {
	#try in R will catch the error when evaluating an expression
	print ("print (\"Check $i if duplicate rows exist.\")
tmp=read.delim(\"$i\",header=F)
if (TRUE \%in\% duplicated (tmp[,8]))
{ print (\"ATTENTION! Duplicate rows exist, might be a problem.\")} else 
print (\"No duplicate rows found, good.\")
");
	}
	#x represents the base file for merging
	print ("x=read.csv(\"$file_name.genome_summary.csv\")
tmp=x
print (\"Before trimming, x dimension:\")
dim(x)
x=subset(x,select=Otherinfo)
print (\"after trimming, x dimension:\")
dim(x)
");
	my $count=0;
	for my $i (@annovar_files) {
		$count++;
		#y represents one target to merge
		print ("print (\"Reading $i ... dimension:\")
y=read.delim(\"$i\",header=F)
dim(y)
x=merge(x,y,by.x=\'Otherinfo\',by.y=\'V8\',all.x=T)
colnames(x)[",1+$count-1+2,"]=levels(x[,",1+$count-1+1,"])
x=subset(x,select=c(1:",1+$count-1,",",1+$count-1+2,"))
");
	}
print ("x=merge(tmp,x,by=\'Otherinfo\')
print (\"final x dimension:\")
dim(x)
write.csv(x,\"v1_CRC_variant_biomatrix_$rs_ID.csv\",row.names=FALSE)
print (\"$rs_ID annotation merging finished!\")
print (\"Results written to v1_CRC_variant_biomatrix_$rs_ID.csv\")
");
	close R_SCRIPT;
}
#system "Rscript --vanilla tmp.script";

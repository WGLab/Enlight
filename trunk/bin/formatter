#!/usr/bin/env perl

use strict;
use warnings;
use File::Spec;

my $BUCKET_NUM=10000;
my $PROGRAM="formatter";
my $usage=
"Usage: $PROGRAM 
	index 		extract chr, start, end, ref, alt rsID from ANNOVAR dbSNP, sort and index by rsID
	indexvcf        extract chr, start, end, ref, alt rsID from VCF, sort and index by rsID
	delim2tab	replace all commas by tab
	rs2avinput 	remove header and convert rsID to AVINPUT format
	addbin		add BIN column as 1st column, delimiter is TAB\n";
die $usage if @ARGV<1;
my $op=shift @ARGV;

if ($op eq 'delim2tab')
{
    &delim2tab(@ARGV);
} elsif ($op eq 'rs2avinput')
{
    &rs2avinput(@ARGV);
}elsif ($op eq 'index')
{
    &index(@ARGV);
} elsif ($op eq 'indexvcf')
{
    &indexVCF(@ARGV);
} elsif ($op eq 'addbin')
{
    &addbin(@ARGV);
}else
{
    die $usage;
}

#-------------------------------------------------------------------------
sub addbin
{
    die "$PROGRAM addbin <input> <output>\n" unless @ARGV==2;
    my $in=shift;
    my $out=shift;
    open IN,'<',$in or die "Cannot open $in: $!\n";
    open OUT,'>',$out or die "cannot write to $out: $!\n";
    while (<IN>)
    {
	s/^/1\t/;
	print OUT;
    }
    close IN;
    close OUT;
    warn "BIN column added to $out\n";
}
sub delim2tab
{
#Usage: &delim2tab($infile,$outfile)
#replace all delimiters with tabs

    my $usage="$PROGRAM delim2tab <delim> <infile> <outfile>\ndelimiters accepted: whitespace,space,comma";
    die $usage unless @ARGV==3;
    my $delim=shift;
    my $file=shift;
    my $outfile=shift;

    open IN,'<',$file or die "Cannot open $file: $!\n";
    open OUT,'>',$outfile or die "Failed to write to $outfile: $!\n";
    if ($delim eq 'whitespace')
    {
	while (<IN>)
	{
	    s/[\n\r]+/\n/g;
	    s/[\t ]+/\t/g;
	    print OUT;
	}
    } elsif ($delim eq 'space')
    {
	while (<IN>)
	{
	    s/[\n\r]+/\n/g;
	    s/\t/!!TAB!!/g;
	    s/ /\t/g;
	    s/!!TAB!!/,/g;
	    print OUT;
	}
    } elsif ($delim eq 'comma')
    {
	while (<IN>)
	{
	    s/\t/!!TAB!!/g;
	    s/[\n\r]+/\n/g;
	    s/,/\t/g;
	    s/!!TAB!!/,/g;
	    print OUT;
	}
    } else
    {
	die "Uncrecognized delimiter.\n$usage";
    }
    close IN;
    close OUT;
}

sub rs2avinput
{
    #Usage: &rs2avinput($infile,$outfile,$annodir)
    #convert SNP names (eg rs1234) to standard AVINPUT format (chr,start,end,ref,alt)
    #assume 1st line is header
    my $usage="$PROGRAM rs2avinput <infile> <outfile> <snpcol> <db>\n";
    die $usage unless @ARGV == 4;
    my $in=shift;
    my $out=shift;
    my $snpcol=shift;
    my $db=shift;
    my %bucket_bin;
    my %varidx_bucket;
    my %varidx_pos;
    my @var;

    my $snpcol_idx=&findSNPColIdx($in,$snpcol);

    {
	#get bin for each variant
	open IN,'<',$in or die "Cannot open $in: $!\n";
	while(<IN>)
	{
	    chomp;
	    next if $. == 1; #do nothing for header
	    #make sure it's tab delimited
	    my @fields=split /\t/,$_,-1;
	    my $rs=$fields[$snpcol_idx] || 'NA';
	    push @var,$rs;
	}
	close IN;

	my ($bucket_ref,$var_ref)=&findbin($db,@var);
	%bucket_bin=%{$bucket_ref};
	%varidx_bucket=%{$var_ref};
    }

    {
	#get chr\tstart\tend\tref\talt for each variant

	open DB,'<',$db or die "Cannot open $db: $!\n";
	for my $bucket(keys %bucket_bin)
	{
	    if ($bucket ne "NA")
	    {
		my @varidx_group=grep { $varidx_bucket{$_} eq $bucket } keys %varidx_bucket;

		@varidx_group=sort 
		{
		    my ($no1)=$var[$a]=~/rs(\d+)/;
		    my ($no2)=$var[$b]=~/rs(\d+)/;
		    return 0 unless (defined $no1 && defined $no2); 

		    return $no1 <=> $no2;
		}  @varidx_group;

		my $start_pos=$bucket_bin{$bucket};
		for my $i(@varidx_group)
		{
		    my ($in_id)= $var[$i]=~/rs(\d+)/ or next;
		    my $last_pos=$start_pos;
		    seek DB,$start_pos,0;
		    while (my $dbln=<DB>)
		    {
			$last_pos=tell;
			my @dbf=split(/\t/,$dbln,-1);
			my ($id)= $dbf[5]=~/rs(\d+)/; #no check for number of fields  or matching
			if ($id == $in_id)
			{
			    $varidx_pos{$i}=join("\t",@dbf[0..4]);
			    $start_pos=$last_pos;
			    last;
			} elsif ($id > $in_id)
			{
			    $varidx_pos{$i}="NA\tNA\tNA\tNA\tNA";
			    $start_pos=$last_pos;
			    last;
			}
		    }
		}
	    }
	}
	close DB;

    }

    {
	open IN,'<',$in or die "Cannot open $in: $!\n";
	open OUT,'>',$out or die "Cannot write to $out: $!\n";
	my $i=0;
	while(<IN>)
	{
	    chomp;
	    print OUT "Chr\tStart\tEnd\tREF\tALT\t$_\n" and next if $. == 1; #do nothing for header
	    #make sure it's tab delimited

	    if (defined $varidx_pos{$i})
	    {
		print OUT "$varidx_pos{$i}\t$_\n";
	    } else
	    {
		print OUT "NA\tNA\tNA\tNA\tNA\t$_\n";
	    }
	    $i++;
	}
	close IN;
	close OUT;
    }
}
sub findSNPColIdx
{
    my $in=shift;
    my $snpcol=shift;

    open IN,'<',$in or die "Cannot open $in\n";
    while (<IN>)
    {
	last if $.>1;
	my @fields=split;
	for my $i(0..$#fields)
	{
	    #make sure it's a whitespace-delimited file
	    if ($fields[$i] eq $snpcol)
	    {
		close IN and return $i;
	    }
	}
    }
    close IN;
    die "Cannot find SNP column.\n";
}

sub index
{
    my $usage="$PROGRAM index <ANNOVAR-dbSNP> <out-prefix>\n";
    die $usage unless @ARGV==2;
    my $db=shift @ARGV;
    my $out_prefix=shift @ARGV;
    my $tmp="/tmp/$$.db.tmp";

    #format:X	1203	1203	A	T/C	rs123
    &extract($db,$tmp);
    &sort($tmp,"$out_prefix.txt");
    &genIdx("$out_prefix.txt","$out_prefix.txt.idx"); #use tell, every 10000 rsIDs
}

sub findbin
{
    #usage:&findbin(<processed-dbfile>,<rs1 rs2 ...>);
    #return two hash ref: one contain all buckets and BINs, the other index and buckets/NA
    my $db=shift;
    my @rs=@_;
    my $idx="$db.idx";
    my @idx_lines;
    my ($minrs,$maxrs);
    my %return; #record rs_hash for each rsID
    my %bucket; #record rs_hash and corresponding bin


    &genIdx($db,$idx) unless -f $idx;
    {
	#read index into memory
	open IN,'<',$idx or die "Cannot open $idx:$!\n";
	while(<IN>)
	{
	    #format:position_in_file\trsID
	    chomp;
	    my @f=split;
	    die "2 fields expected: $_ at line $.\n" unless @f==2;
	    push @idx_lines,\@f;
	}
	close IN;
    }
    $minrs= $idx_lines[0][1];
    $maxrs= $idx_lines[$#idx_lines][1];

    for my $i(0..$#rs)
    {
	my $rs=$rs[$i];
	warn "rsXXXX expected: $rs\n" and $return{$i}="NA" and next unless $rs=~/rs(\d+)/;
	my $id=$1;

	warn "Out of bound: $rs\n" and $return{$i}="NA" and next unless ($id>=$minrs && $id<=$maxrs);

	my $rs_hash;
	if ($id<$BUCKET_NUM)
	{
	    $rs_hash=$minrs;

	} else
	{
	    $rs_hash=$id - $id % $BUCKET_NUM;
	}

	$bucket{$rs_hash}=0 unless defined $bucket{$rs_hash};
	$return{$i}=$rs_hash;
    }

    {
	#find bin for each rs_hash
	my $start_pos=0;
	for my $rs_hash(sort {$a <=> $b} keys %bucket) #ascending
	{
	    #warn "rs_hash: $rs_hash\n";
	    #warn "start_pos:$start_pos\n";
	    my $prev_pos=0;
	    for my $i($start_pos..$#idx_lines)
	    {
		#format:position_in_file\trsID
		my @f=@{$idx_lines[$i]};
		if ($f[1] > $rs_hash) 
		{
		    #warn "$f[1] > $rs_hash: $prev_pos\n";
		    $bucket{$rs_hash}=$prev_pos;
		    $start_pos=$i-1 if $i>0; #make sure prev_pos is not empty
		    last;
		} elsif ($f[1] == $rs_hash)
		{
		    #warn "$f[1] = $rs_hash: $f[0]\n";
		    $bucket{$rs_hash}=$f[0];
		    $start_pos=$i;
		    last;
		}
		$prev_pos=$f[0];
	    }
	}
    }

    return \%bucket,\%return;
}

sub genIdx
{
    my $db=shift;
    my $idx=shift;

    open IN,'<',$db or die "Cannot open $db:$!\n";
    open OUT,'>',$idx or die "Cannot write to $idx: $!\n";

    my $last_pos=0;
    my $second_last_pos=0;
    while(<IN>)
    {
	my @f=split(/\t/,$_,-1);
	die "6 fields expected: $_ at line $.\n" if @f!=6;
	my $rs=$f[5];
	die "rsXXXX expected: $rs at line $.\n" unless $rs=~/rs(\d+)/;
	if ($.==1)
	{
	    print OUT "0\t$1\n"; #lower bound
	} else
	{
	    print OUT "$last_pos\t$1\n" if $1 % $BUCKET_NUM == 0;
	}
	$second_last_pos=$last_pos;
	$last_pos=tell;
    }
    {
	seek IN,$second_last_pos,0;
	my $last=<IN>;
	my @f=split(/\t/,$last,-1);
	$f[5]=~/rs(\d+)/;
	print OUT "$second_last_pos\t$1\n" unless $1 % $BUCKET_NUM == 0;
    }
    close IN;
    close OUT;
}

sub sort
{
    my $in=shift;
    my $out=shift;

    my $cmd="perl -pe 's/(\\s)rs(\\d+)\$/\$1\$2/' $in | msort -k n6 | perl -pe 's/(\\s)(\\d+)\$/\$1rs\$2/' > $out";
    !system($cmd) or die "$!";
}

sub extract
{
    my $db=shift;
    my $out=shift;

    warn "Converting ANNOVAR dbSNP file to tab-delimited rsID database.\n".
    "Every line of the output consists of chr, start, end, ref, alt and rsID.\n".
    "One rsID may have multiple hits in the genome.\n";
    open IN,'<',$db or die "Cannot read $db:$!\n";
    open OUT,'>',$out or die "Cannot write to $out: $!\n";
    while (<IN>)
    {
	#below adapted from ANNOVAR
	my @record=split(/\t/,$_,-1); #-1 in case there are empty fields
	@record == 18 or @record == 26 or die "Error: invalid record found in dbSNP database file $db (18 or 26 fields expected but found ${\(scalar @record)}): <$_>\n" . join("\n",@record);
	my ($chr, $start, $end, $rsid, $strand, $ucscallele, $twoallele, $class) = @record[1,2,3,4,6,8,9,11];
	$start++; #UCSC genome coordinates
	$chr=~s/^chr// or die "Error: invalid record found in $db (2nd field should begin with 'chr'): <$_>\n";
	next unless $class=~/single|deletion|in-del|insertion/;
	my @allele = split (/\//, $twoallele);
	@allele >= 2 or next;       

	if ($strand eq '-') 
	{        
	    #handle reverse strand annotation (the vast majority of records in dbSNP should be already in + strand)
	    map { $_=&revcom($_) } @allele ;
	}
	my ($ref,@alt)=@allele; #reports all alternative alleles
	#in-del is usually annotated below, so they require special treatment
	#587     chr1    384538  384539  rs3971283       0       +       T       T       -/ATT   genomic in-del  unknown 0       0       unknown exact   3
	if ($class eq 'in-del') 
	{        #indel are usually annotated as -/xxx, where xxx is the alternative allele
	    @alt = (length ($ucscallele) . $allele[1] );    #prefix a number before the alleles, indicating block substitution
	} elsif ($class eq 'insertion') 
	{
	    $start--;
	    @alt = ("0$allele[1]");
	} elsif ($class eq 'deletion') 
	{
	    @alt = (length ($ucscallele));
	} else 
	{
	    for my $i (0 .. @allele-1) 
	    {
		if ($ucscallele eq $allele[$i]) 
		{
		    @alt = @allele;
		    splice (@alt, $i, 1);
		}
	    }
	    next unless (@alt); #ucscallele is not part of allele description, do not trust this record
	}
	#note that some SNPs (e.g., rs28434453) may hit multiple locations, report all of them
	#585        chr1    13301   13302   rs28434453      0       -       C       C       C/T     genomic single etc...
	#1367    chr15   102517867       102517868       rs28434453      0       +       G       G       C/T     genomic single etc...
	print OUT join("\t",$chr,$start,$end,$ref,join('/',@alt),$rsid),"\n";
    }
    close IN;
    close OUT;
}

sub revcom
{
    my ($seq) = @_;
    $seq = reverse $seq;
    $seq =~ tr/acgtACGT/tgcaTGCA/;
    return ($seq);
}

sub indexVCF
{
    my $usage="$PROGRAM indexvcf <VCF> <out-prefix>\n";
    die $usage unless @ARGV==2;
    my $db=shift @ARGV;
    my $out_prefix=shift @ARGV;
    my $tmp="/tmp/$$.db.tmp";

    #format:20     14370   rs6054257 G      A       29   PASS   NS=3;DP=14;AF=0.5;DB;H2
    &extractVCF($db,$tmp);
    &sort($tmp,"$out_prefix.txt");
    &genIdx("$out_prefix.txt","$out_prefix.txt.idx"); #use tell, every 10000 rsIDs
}
sub extractVCF
{
    my $in=shift;
    my $out=shift;

    warn "Converting VCF to tab-delimited rsID database.\n".
    "Every line of the output consists of chr, start, end, ref, alt, rsID.\n".
    "One rsID may have multiple hits in the genome.\n";

    open IN,'<',$in or die "Cannot read $in:$!\n";
    open OUT,'>',$out or die "Cannot write to $out: $!\n";
    while (<IN>)
    {
	next if /^#/;
	s/\s+$//;

	my @f=split(/\t/,$_);
	die "At least 5 fields expected: @f\n" unless @f>=5;

	my ($chr, $pos, $rsid, $ref,$alt) = @f[0..4];
	$chr=~s/^chr//;
	if ($rsid=~/;/)
	{
	    my @rsid=split /;/,$rsid;
	    for my $i(@rsid)
	    {
		print OUT join("\t",$chr,$pos,$pos,$ref,$alt,$i),"\n";
	    }
	} else
	{
	    print OUT join("\t",$chr,$pos,$pos,$ref,$alt,$rsid),"\n";
	}
    }
    close IN;
    close OUT;
}
